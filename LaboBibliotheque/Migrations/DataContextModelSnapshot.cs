// <auto-generated />
using System;
using LaboBibliotheque_BLL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LaboBibliotheque_BLL.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LaboBibliotheque.Entities.Achats", b =>
                {
                    b.Property<int>("IDachat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDachat"));

                    b.Property<DateTime>("DateAchat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("IDutilisateur")
                        .HasColumnType("int");

                    b.Property<int>("ISBN")
                        .HasColumnType("int");

                    b.HasKey("IDachat");

                    b.HasIndex("IDutilisateur");

                    b.HasIndex("ISBN");

                    b.ToTable("Achats");

                    b.HasData(
                        new
                        {
                            IDachat = -1,
                            DateAchat = new DateTime(2024, 10, 1, 16, 47, 54, 962, DateTimeKind.Local).AddTicks(5002),
                            IDutilisateur = -1,
                            ISBN = -123456
                        },
                        new
                        {
                            IDachat = -2,
                            DateAchat = new DateTime(2024, 10, 1, 16, 47, 54, 962, DateTimeKind.Local).AddTicks(5089),
                            IDutilisateur = -2,
                            ISBN = -123457
                        },
                        new
                        {
                            IDachat = -3,
                            DateAchat = new DateTime(2024, 10, 1, 16, 47, 54, 962, DateTimeKind.Local).AddTicks(5092),
                            IDutilisateur = -3,
                            ISBN = -123458
                        },
                        new
                        {
                            IDachat = -4,
                            DateAchat = new DateTime(2024, 10, 1, 16, 47, 54, 962, DateTimeKind.Local).AddTicks(5094),
                            IDutilisateur = -4,
                            ISBN = -123459
                        },
                        new
                        {
                            IDachat = -5,
                            DateAchat = new DateTime(2024, 10, 1, 16, 47, 54, 962, DateTimeKind.Local).AddTicks(5096),
                            IDutilisateur = -5,
                            ISBN = -123460
                        },
                        new
                        {
                            IDachat = -6,
                            DateAchat = new DateTime(2024, 10, 1, 16, 47, 54, 962, DateTimeKind.Local).AddTicks(5099),
                            IDutilisateur = -6,
                            ISBN = -123461
                        },
                        new
                        {
                            IDachat = -7,
                            DateAchat = new DateTime(2024, 10, 1, 16, 47, 54, 962, DateTimeKind.Local).AddTicks(5101),
                            IDutilisateur = -7,
                            ISBN = -123462
                        },
                        new
                        {
                            IDachat = -8,
                            DateAchat = new DateTime(2024, 10, 1, 16, 47, 54, 962, DateTimeKind.Local).AddTicks(5103),
                            IDutilisateur = -8,
                            ISBN = -123463
                        },
                        new
                        {
                            IDachat = -9,
                            DateAchat = new DateTime(2024, 10, 1, 16, 47, 54, 962, DateTimeKind.Local).AddTicks(5105),
                            IDutilisateur = -9,
                            ISBN = -123464
                        },
                        new
                        {
                            IDachat = -10,
                            DateAchat = new DateTime(2024, 10, 1, 16, 47, 54, 962, DateTimeKind.Local).AddTicks(5107),
                            IDutilisateur = -10,
                            ISBN = -123465
                        });
                });

            modelBuilder.Entity("LaboBibliotheque.Entities.Adresses", b =>
                {
                    b.Property<int>("IDadresse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDadresse"));

                    b.Property<int>("Boite")
                        .HasColumnType("int");

                    b.Property<string>("Localite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Pays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("IDadresse");

                    b.ToTable("Adresses");

                    b.HasData(
                        new
                        {
                            IDadresse = -1,
                            Boite = 0,
                            Localite = "Bruxelles",
                            Numero = 16,
                            Pays = "Belgique",
                            Rue = "Rue de la Loi",
                            UtilisateurId = -1
                        },
                        new
                        {
                            IDadresse = -2,
                            Boite = 1,
                            Localite = "Anvers",
                            Numero = 20,
                            Pays = "Belgique",
                            Rue = "Meir",
                            UtilisateurId = -2
                        },
                        new
                        {
                            IDadresse = -3,
                            Boite = 3,
                            Localite = "Gand",
                            Numero = 5,
                            Pays = "Belgique",
                            Rue = "Veldstraat",
                            UtilisateurId = -3
                        },
                        new
                        {
                            IDadresse = -4,
                            Boite = 0,
                            Localite = "Liège",
                            Numero = 10,
                            Pays = "Belgique",
                            Rue = "Place Saint-Lambert",
                            UtilisateurId = -4
                        },
                        new
                        {
                            IDadresse = -5,
                            Boite = 0,
                            Localite = "Namur",
                            Numero = 8,
                            Pays = "Belgique",
                            Rue = "Rue de Fer",
                            UtilisateurId = -5
                        },
                        new
                        {
                            IDadresse = -6,
                            Boite = 0,
                            Localite = "Charleroi",
                            Numero = 12,
                            Pays = "Belgique",
                            Rue = "Rue de la Montagne",
                            UtilisateurId = -6
                        },
                        new
                        {
                            IDadresse = -7,
                            Boite = 12,
                            Localite = "Mons",
                            Numero = 3,
                            Pays = "Belgique",
                            Rue = "Grand-Place",
                            UtilisateurId = -7
                        },
                        new
                        {
                            IDadresse = -8,
                            Boite = 0,
                            Localite = "Louvain",
                            Numero = 15,
                            Pays = "Belgique",
                            Rue = "Bondgenotenlaan",
                            UtilisateurId = -8
                        },
                        new
                        {
                            IDadresse = -9,
                            Boite = 4,
                            Localite = "Bruges",
                            Numero = 7,
                            Pays = "Belgique",
                            Rue = "Steenstraat",
                            UtilisateurId = -9
                        },
                        new
                        {
                            IDadresse = -10,
                            Boite = 0,
                            Localite = "Hasselt",
                            Numero = 9,
                            Pays = "Belgique",
                            Rue = "Koning Albertstraat",
                            UtilisateurId = -10
                        });
                });

            modelBuilder.Entity("LaboBibliotheque.Entities.Auteurs", b =>
                {
                    b.Property<int>("IDauteur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDauteur"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDauteur");

                    b.ToTable("Auteurs");

                    b.HasData(
                        new
                        {
                            IDauteur = -1,
                            Nom = "Hugo",
                            Prenom = "Victor"
                        },
                        new
                        {
                            IDauteur = -2,
                            Nom = "Zola",
                            Prenom = "Émile"
                        },
                        new
                        {
                            IDauteur = -3,
                            Nom = "Dumas",
                            Prenom = "Alexandre"
                        },
                        new
                        {
                            IDauteur = -4,
                            Nom = "Flaubert",
                            Prenom = "Gustave"
                        },
                        new
                        {
                            IDauteur = -5,
                            Nom = "Balzac",
                            Prenom = "Honoré de"
                        },
                        new
                        {
                            IDauteur = -6,
                            Nom = "Verne",
                            Prenom = "Jules"
                        },
                        new
                        {
                            IDauteur = -7,
                            Nom = "Sartre",
                            Prenom = "Jean-Paul"
                        },
                        new
                        {
                            IDauteur = -8,
                            Nom = "Camus",
                            Prenom = "Albert"
                        },
                        new
                        {
                            IDauteur = -9,
                            Nom = "Proust",
                            Prenom = "Marcel"
                        },
                        new
                        {
                            IDauteur = -10,
                            Nom = "Baudelaire",
                            Prenom = "Charles"
                        });
                });

            modelBuilder.Entity("LaboBibliotheque.Entities.Ecrits", b =>
                {
                    b.Property<int>("ISBN")
                        .HasColumnType("int");

                    b.Property<int>("IDauteur")
                        .HasColumnType("int");

                    b.HasKey("ISBN", "IDauteur");

                    b.HasIndex("IDauteur");

                    b.ToTable("Ecrits", (string)null);

                    b.HasData(
                        new
                        {
                            ISBN = -123456,
                            IDauteur = -1
                        },
                        new
                        {
                            ISBN = -123457,
                            IDauteur = -2
                        },
                        new
                        {
                            ISBN = -123458,
                            IDauteur = -3
                        },
                        new
                        {
                            ISBN = -123459,
                            IDauteur = -4
                        },
                        new
                        {
                            ISBN = -123460,
                            IDauteur = -5
                        },
                        new
                        {
                            ISBN = -123461,
                            IDauteur = -6
                        },
                        new
                        {
                            ISBN = -123462,
                            IDauteur = -7
                        },
                        new
                        {
                            ISBN = -123463,
                            IDauteur = -8
                        },
                        new
                        {
                            ISBN = -123464,
                            IDauteur = -9
                        },
                        new
                        {
                            ISBN = -123465,
                            IDauteur = -10
                        });
                });

            modelBuilder.Entity("LaboBibliotheque.Entities.Genres", b =>
                {
                    b.Property<int>("IDgenre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDgenre"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDgenre");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            IDgenre = -1,
                            Nom = "Science-fiction"
                        },
                        new
                        {
                            IDgenre = -2,
                            Nom = "Fantaisie"
                        },
                        new
                        {
                            IDgenre = -3,
                            Nom = "Mystère"
                        },
                        new
                        {
                            IDgenre = -4,
                            Nom = "Thriller"
                        },
                        new
                        {
                            IDgenre = -5,
                            Nom = "Romance"
                        },
                        new
                        {
                            IDgenre = -6,
                            Nom = "Horreur"
                        },
                        new
                        {
                            IDgenre = -7,
                            Nom = "Non-fiction"
                        },
                        new
                        {
                            IDgenre = -8,
                            Nom = "Biographie"
                        },
                        new
                        {
                            IDgenre = -9,
                            Nom = "Historique"
                        },
                        new
                        {
                            IDgenre = -10,
                            Nom = "Développement personnel"
                        },
                        new
                        {
                            IDgenre = -11,
                            Nom = "Aventure"
                        },
                        new
                        {
                            IDgenre = -12,
                            Nom = "Enfants"
                        },
                        new
                        {
                            IDgenre = -13,
                            Nom = "Jeunes adultes"
                        },
                        new
                        {
                            IDgenre = -14,
                            Nom = "Dystopie"
                        },
                        new
                        {
                            IDgenre = -15,
                            Nom = "Classique"
                        },
                        new
                        {
                            IDgenre = -16,
                            Nom = "Poésie"
                        },
                        new
                        {
                            IDgenre = -17,
                            Nom = "Drame"
                        },
                        new
                        {
                            IDgenre = -18,
                            Nom = "Satire"
                        },
                        new
                        {
                            IDgenre = -19,
                            Nom = "Anthologie"
                        },
                        new
                        {
                            IDgenre = -20,
                            Nom = "Policier"
                        },
                        new
                        {
                            IDgenre = -21,
                            Nom = "Roman graphique"
                        },
                        new
                        {
                            IDgenre = -22,
                            Nom = "Fiction historique"
                        },
                        new
                        {
                            IDgenre = -23,
                            Nom = "Mémoires"
                        },
                        new
                        {
                            IDgenre = -24,
                            Nom = "Philosophie"
                        },
                        new
                        {
                            IDgenre = -25,
                            Nom = "Psychologie"
                        },
                        new
                        {
                            IDgenre = -26,
                            Nom = "Religion"
                        },
                        new
                        {
                            IDgenre = -27,
                            Nom = "Science"
                        },
                        new
                        {
                            IDgenre = -28,
                            Nom = "Voyage"
                        },
                        new
                        {
                            IDgenre = -29,
                            Nom = "True crime"
                        },
                        new
                        {
                            IDgenre = -30,
                            Nom = "Western"
                        });
                });

            modelBuilder.Entity("LaboBibliotheque.Entities.Livres", b =>
                {
                    b.Property<int>("ISBN")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ISBN"));

                    b.Property<int>("IDgenre")
                        .HasColumnType("int");

                    b.Property<double>("Prix")
                        .HasColumnType("float");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("stockachat")
                        .HasColumnType("int");

                    b.Property<int>("stocklocation")
                        .HasColumnType("int");

                    b.HasKey("ISBN");

                    b.HasIndex("IDgenre");

                    b.ToTable("Livres");

                    b.HasData(
                        new
                        {
                            ISBN = -123456,
                            IDgenre = -15,
                            Prix = 12.99,
                            Titre = "Les Misérables",
                            stockachat = 10,
                            stocklocation = 5
                        },
                        new
                        {
                            ISBN = -123457,
                            IDgenre = -9,
                            Prix = 10.99,
                            Titre = "Germinal",
                            stockachat = 7,
                            stocklocation = 3
                        },
                        new
                        {
                            ISBN = -123458,
                            IDgenre = -11,
                            Prix = 14.99,
                            Titre = "Le Comte de Monte-Cristo",
                            stockachat = 8,
                            stocklocation = 4
                        },
                        new
                        {
                            ISBN = -123459,
                            IDgenre = -15,
                            Prix = 11.99,
                            Titre = "Madame Bovary",
                            stockachat = 12,
                            stocklocation = 6
                        },
                        new
                        {
                            ISBN = -123460,
                            IDgenre = -15,
                            Prix = 13.99,
                            Titre = "La Comédie humaine",
                            stockachat = 5,
                            stocklocation = 2
                        },
                        new
                        {
                            ISBN = -123461,
                            IDgenre = -1,
                            Prix = 9.9900000000000002,
                            Titre = "Vingt mille lieues sous les mers",
                            stockachat = 14,
                            stocklocation = 7
                        },
                        new
                        {
                            ISBN = -123462,
                            IDgenre = -24,
                            Prix = 15.99,
                            Titre = "L'Être et le Néant",
                            stockachat = 3,
                            stocklocation = 1
                        },
                        new
                        {
                            ISBN = -123463,
                            IDgenre = -15,
                            Prix = 8.9900000000000002,
                            Titre = "L'Étranger",
                            stockachat = 9,
                            stocklocation = 4
                        },
                        new
                        {
                            ISBN = -123464,
                            IDgenre = -15,
                            Prix = 16.989999999999998,
                            Titre = "À la recherche du temps perdu",
                            stockachat = 11,
                            stocklocation = 5
                        },
                        new
                        {
                            ISBN = -123465,
                            IDgenre = -16,
                            Prix = 7.9900000000000002,
                            Titre = "Les Fleurs du mal",
                            stockachat = 6,
                            stocklocation = 3
                        });
                });

            modelBuilder.Entity("LaboBibliotheque.Entities.Locations", b =>
                {
                    b.Property<int>("IDlocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDlocation"));

                    b.Property<DateTime>("DateLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("DateRetour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("DATEADD(day, 14, GETDATE())");

                    b.Property<int>("IDutilisateur")
                        .HasColumnType("int");

                    b.Property<int>("ISBN")
                        .HasColumnType("int");

                    b.HasKey("IDlocation");

                    b.HasIndex("IDutilisateur");

                    b.HasIndex("ISBN");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            IDlocation = -1,
                            DateLocation = new DateTime(2024, 10, 1, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8044),
                            DateRetour = new DateTime(2024, 10, 15, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8113),
                            IDutilisateur = -1,
                            ISBN = -123456
                        },
                        new
                        {
                            IDlocation = -2,
                            DateLocation = new DateTime(2024, 10, 1, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8119),
                            DateRetour = new DateTime(2024, 10, 15, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8121),
                            IDutilisateur = -2,
                            ISBN = -123457
                        },
                        new
                        {
                            IDlocation = -3,
                            DateLocation = new DateTime(2024, 10, 1, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8124),
                            DateRetour = new DateTime(2024, 10, 15, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8125),
                            IDutilisateur = -3,
                            ISBN = -123458
                        },
                        new
                        {
                            IDlocation = -4,
                            DateLocation = new DateTime(2024, 10, 1, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8128),
                            DateRetour = new DateTime(2024, 10, 15, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8129),
                            IDutilisateur = -4,
                            ISBN = -123459
                        },
                        new
                        {
                            IDlocation = -5,
                            DateLocation = new DateTime(2024, 10, 1, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8132),
                            DateRetour = new DateTime(2024, 10, 15, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8133),
                            IDutilisateur = -5,
                            ISBN = -123460
                        },
                        new
                        {
                            IDlocation = -6,
                            DateLocation = new DateTime(2024, 10, 1, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8136),
                            DateRetour = new DateTime(2024, 10, 15, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8138),
                            IDutilisateur = -6,
                            ISBN = -123461
                        },
                        new
                        {
                            IDlocation = -7,
                            DateLocation = new DateTime(2024, 10, 1, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8140),
                            DateRetour = new DateTime(2024, 10, 15, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8141),
                            IDutilisateur = -7,
                            ISBN = -123462
                        },
                        new
                        {
                            IDlocation = -8,
                            DateLocation = new DateTime(2024, 10, 1, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8144),
                            DateRetour = new DateTime(2024, 10, 15, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8145),
                            IDutilisateur = -8,
                            ISBN = -123463
                        },
                        new
                        {
                            IDlocation = -9,
                            DateLocation = new DateTime(2024, 10, 1, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8148),
                            DateRetour = new DateTime(2024, 10, 15, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8149),
                            IDutilisateur = -9,
                            ISBN = -123464
                        },
                        new
                        {
                            IDlocation = -10,
                            DateLocation = new DateTime(2024, 10, 1, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8152),
                            DateRetour = new DateTime(2024, 10, 15, 16, 47, 54, 969, DateTimeKind.Local).AddTicks(8153),
                            IDutilisateur = -10,
                            ISBN = -123465
                        });
                });

            modelBuilder.Entity("LaboBibliotheque.Entities.Utilisateurs", b =>
                {
                    b.Property<int>("IDutilisateur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDutilisateur"));

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IDadresse")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("[Nom] + [Prenom] + CAST(YEAR([DateNaissance]) AS NVARCHAR)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDutilisateur");

                    b.HasIndex("IDadresse");

                    b.ToTable("Utilisateurs");

                    b.HasData(
                        new
                        {
                            IDutilisateur = -1,
                            DateNaissance = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jean.dupont@example.com",
                            IDadresse = -1,
                            Nom = "Dupont",
                            Password = "DupontJean1980",
                            Prenom = "Jean"
                        },
                        new
                        {
                            IDutilisateur = -2,
                            DateNaissance = new DateTime(1985, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "marie.martin@example.com",
                            IDadresse = -2,
                            Nom = "Martin",
                            Password = "MartinMarie1985",
                            Prenom = "Marie"
                        },
                        new
                        {
                            IDutilisateur = -3,
                            DateNaissance = new DateTime(1990, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "luc.bernard@example.com",
                            IDadresse = -3,
                            Nom = "Bernard",
                            Password = "BernardLuc1990",
                            Prenom = "Luc"
                        },
                        new
                        {
                            IDutilisateur = -4,
                            DateNaissance = new DateTime(1995, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sophie.dubois@example.com",
                            IDadresse = -4,
                            Nom = "Dubois",
                            Password = "DuboisSophie1995",
                            Prenom = "Sophie"
                        },
                        new
                        {
                            IDutilisateur = -5,
                            DateNaissance = new DateTime(2000, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "pierre.durand@example.com",
                            IDadresse = -5,
                            Nom = "Durand",
                            Password = "DurandPierre2000",
                            Prenom = "Pierre"
                        },
                        new
                        {
                            IDutilisateur = -6,
                            DateNaissance = new DateTime(1975, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "julie.lefevre@example.com",
                            IDadresse = -6,
                            Nom = "Lefevre",
                            Password = "LefevreJulie1975",
                            Prenom = "Julie"
                        },
                        new
                        {
                            IDutilisateur = -7,
                            DateNaissance = new DateTime(1988, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "paul.moreau@example.com",
                            IDadresse = -7,
                            Nom = "Moreau",
                            Password = "MoreauPaul1988",
                            Prenom = "Paul"
                        },
                        new
                        {
                            IDutilisateur = -8,
                            DateNaissance = new DateTime(1992, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "laura.simon@example.com",
                            IDadresse = -8,
                            Nom = "Simon",
                            Password = "SimonLaura1992",
                            Prenom = "Laura"
                        },
                        new
                        {
                            IDutilisateur = -9,
                            DateNaissance = new DateTime(1983, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "antoine.michel@example.com",
                            IDadresse = -9,
                            Nom = "Michel",
                            Password = "MichelAntoine1983",
                            Prenom = "Antoine"
                        },
                        new
                        {
                            IDutilisateur = -10,
                            DateNaissance = new DateTime(1997, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emma.leroy@example.com",
                            IDadresse = -10,
                            Nom = "Leroy",
                            Password = "LeroyEmma1997",
                            Prenom = "Emma"
                        });
                });

            modelBuilder.Entity("LaboBibliotheque.Entities.Achats", b =>
                {
                    b.HasOne("LaboBibliotheque.Entities.Utilisateurs", "Utilisateur")
                        .WithMany("ListeAchats")
                        .HasForeignKey("IDutilisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaboBibliotheque.Entities.Livres", "Livre")
                        .WithMany("ListeAchats")
                        .HasForeignKey("ISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Livre");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("LaboBibliotheque.Entities.Ecrits", b =>
                {
                    b.HasOne("LaboBibliotheque.Entities.Auteurs", null)
                        .WithMany()
                        .HasForeignKey("IDauteur")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LaboBibliotheque.Entities.Livres", null)
                        .WithMany()
                        .HasForeignKey("ISBN")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("LaboBibliotheque.Entities.Livres", b =>
                {
                    b.HasOne("LaboBibliotheque.Entities.Genres", "Genre")
                        .WithMany("ListeLivres")
                        .HasForeignKey("IDgenre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("LaboBibliotheque.Entities.Locations", b =>
                {
                    b.HasOne("LaboBibliotheque.Entities.Utilisateurs", "Utilisateur")
                        .WithMany("ListeLocations")
                        .HasForeignKey("IDutilisateur")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LaboBibliotheque.Entities.Livres", "Livre")
                        .WithMany("ListeLocations")
                        .HasForeignKey("ISBN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Livre");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("LaboBibliotheque.Entities.Utilisateurs", b =>
                {
                    b.HasOne("LaboBibliotheque.Entities.Adresses", "Adresse")
                        .WithMany("ListUtilisateur")
                        .HasForeignKey("IDadresse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adresse");
                });

            modelBuilder.Entity("LaboBibliotheque.Entities.Adresses", b =>
                {
                    b.Navigation("ListUtilisateur");
                });

            modelBuilder.Entity("LaboBibliotheque.Entities.Genres", b =>
                {
                    b.Navigation("ListeLivres");
                });

            modelBuilder.Entity("LaboBibliotheque.Entities.Livres", b =>
                {
                    b.Navigation("ListeAchats");

                    b.Navigation("ListeLocations");
                });

            modelBuilder.Entity("LaboBibliotheque.Entities.Utilisateurs", b =>
                {
                    b.Navigation("ListeAchats");

                    b.Navigation("ListeLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
